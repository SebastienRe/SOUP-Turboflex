# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `SOUP.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module SOUP
_M_SOUP = Ice.openModule('SOUP')
__name__ = 'SOUP'

_M_SOUP._t_Player = IcePy.defineValue('::SOUP::Player', Ice.Value, -1, (), False, True, None, ())

if 'PlayerPrx' not in _M_SOUP.__dict__:
    _M_SOUP.PlayerPrx = Ice.createTempClass()
    class PlayerPrx(Ice.ObjectPrx):

        def getMusicFileNameForMusicName(self, musicName, context=None):
            return _M_SOUP.Player._op_getMusicFileNameForMusicName.invoke(self, ((musicName, ), context))

        def getMusicFileNameForMusicNameAsync(self, musicName, context=None):
            return _M_SOUP.Player._op_getMusicFileNameForMusicName.invokeAsync(self, ((musicName, ), context))

        def begin_getMusicFileNameForMusicName(self, musicName, _response=None, _ex=None, _sent=None, context=None):
            return _M_SOUP.Player._op_getMusicFileNameForMusicName.begin(self, ((musicName, ), _response, _ex, _sent, context))

        def end_getMusicFileNameForMusicName(self, _r):
            return _M_SOUP.Player._op_getMusicFileNameForMusicName.end(self, _r)

        def setMusic(self, musicFileName, context=None):
            return _M_SOUP.Player._op_setMusic.invoke(self, ((musicFileName, ), context))

        def setMusicAsync(self, musicFileName, context=None):
            return _M_SOUP.Player._op_setMusic.invokeAsync(self, ((musicFileName, ), context))

        def begin_setMusic(self, musicFileName, _response=None, _ex=None, _sent=None, context=None):
            return _M_SOUP.Player._op_setMusic.begin(self, ((musicFileName, ), _response, _ex, _sent, context))

        def end_setMusic(self, _r):
            return _M_SOUP.Player._op_setMusic.end(self, _r)

        def play(self, context=None):
            return _M_SOUP.Player._op_play.invoke(self, ((), context))

        def playAsync(self, context=None):
            return _M_SOUP.Player._op_play.invokeAsync(self, ((), context))

        def begin_play(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SOUP.Player._op_play.begin(self, ((), _response, _ex, _sent, context))

        def end_play(self, _r):
            return _M_SOUP.Player._op_play.end(self, _r)

        def pause(self, context=None):
            return _M_SOUP.Player._op_pause.invoke(self, ((), context))

        def pauseAsync(self, context=None):
            return _M_SOUP.Player._op_pause.invokeAsync(self, ((), context))

        def begin_pause(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SOUP.Player._op_pause.begin(self, ((), _response, _ex, _sent, context))

        def end_pause(self, _r):
            return _M_SOUP.Player._op_pause.end(self, _r)

        def stop(self, context=None):
            return _M_SOUP.Player._op_stop.invoke(self, ((), context))

        def stopAsync(self, context=None):
            return _M_SOUP.Player._op_stop.invokeAsync(self, ((), context))

        def begin_stop(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SOUP.Player._op_stop.begin(self, ((), _response, _ex, _sent, context))

        def end_stop(self, _r):
            return _M_SOUP.Player._op_stop.end(self, _r)

        def volumeUp(self, context=None):
            return _M_SOUP.Player._op_volumeUp.invoke(self, ((), context))

        def volumeUpAsync(self, context=None):
            return _M_SOUP.Player._op_volumeUp.invokeAsync(self, ((), context))

        def begin_volumeUp(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SOUP.Player._op_volumeUp.begin(self, ((), _response, _ex, _sent, context))

        def end_volumeUp(self, _r):
            return _M_SOUP.Player._op_volumeUp.end(self, _r)

        def volumeDown(self, context=None):
            return _M_SOUP.Player._op_volumeDown.invoke(self, ((), context))

        def volumeDownAsync(self, context=None):
            return _M_SOUP.Player._op_volumeDown.invokeAsync(self, ((), context))

        def begin_volumeDown(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SOUP.Player._op_volumeDown.begin(self, ((), _response, _ex, _sent, context))

        def end_volumeDown(self, _r):
            return _M_SOUP.Player._op_volumeDown.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SOUP.PlayerPrx.ice_checkedCast(proxy, '::SOUP::Player', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SOUP.PlayerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SOUP::Player'
    _M_SOUP._t_PlayerPrx = IcePy.defineProxy('::SOUP::Player', PlayerPrx)

    _M_SOUP.PlayerPrx = PlayerPrx
    del PlayerPrx

    _M_SOUP.Player = Ice.createTempClass()
    class Player(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SOUP::Player')

        def ice_id(self, current=None):
            return '::SOUP::Player'

        @staticmethod
        def ice_staticId():
            return '::SOUP::Player'

        def getMusicFileNameForMusicName(self, musicName, current=None):
            raise NotImplementedError("servant method 'getMusicFileNameForMusicName' not implemented")

        def setMusic(self, musicFileName, current=None):
            raise NotImplementedError("servant method 'setMusic' not implemented")

        def play(self, current=None):
            raise NotImplementedError("servant method 'play' not implemented")

        def pause(self, current=None):
            raise NotImplementedError("servant method 'pause' not implemented")

        def stop(self, current=None):
            raise NotImplementedError("servant method 'stop' not implemented")

        def volumeUp(self, current=None):
            raise NotImplementedError("servant method 'volumeUp' not implemented")

        def volumeDown(self, current=None):
            raise NotImplementedError("servant method 'volumeDown' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SOUP._t_PlayerDisp)

        __repr__ = __str__

    _M_SOUP._t_PlayerDisp = IcePy.defineClass('::SOUP::Player', Player, (), None, ())
    Player._ice_type = _M_SOUP._t_PlayerDisp

    Player._op_getMusicFileNameForMusicName = IcePy.Operation('getMusicFileNameForMusicName', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), ())
    Player._op_setMusic = IcePy.Operation('setMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), ())
    Player._op_play = IcePy.Operation('play', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Player._op_pause = IcePy.Operation('pause', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Player._op_stop = IcePy.Operation('stop', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Player._op_volumeUp = IcePy.Operation('volumeUp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Player._op_volumeDown = IcePy.Operation('volumeDown', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_SOUP.Player = Player
    del Player

# End of module SOUP

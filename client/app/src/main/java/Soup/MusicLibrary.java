//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Soup.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Soup;

public interface MusicLibrary extends com.zeroc.Ice.Object
{
    Song addSong(String title, String author, String type, String extension, com.zeroc.Ice.Current current);

    void addSongData(Song song, byte[] data, boolean finish, com.zeroc.Ice.Current current);

    void updateSong(Song song, boolean reset, com.zeroc.Ice.Current current);

    void removeSong(Song song, com.zeroc.Ice.Current current);

    Song[] searchWithText(String text, com.zeroc.Ice.Current current);

    int playSong(Song song, com.zeroc.Ice.Current current);

    void stopSong(int port, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Soup::MusicLibrary"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Soup::MusicLibrary";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_addSong(MusicLibrary obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_title;
        String iceP_author;
        String iceP_type;
        String iceP_extension;
        iceP_title = istr.readString();
        iceP_author = istr.readString();
        iceP_type = istr.readString();
        iceP_extension = istr.readString();
        inS.endReadParams();
        Song ret = obj.addSong(iceP_title, iceP_author, iceP_type, iceP_extension, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        Song.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_addSongData(MusicLibrary obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        Song iceP_song;
        byte[] iceP_data;
        boolean iceP_finish;
        iceP_song = Song.ice_read(istr);
        iceP_data = istr.readByteSeq();
        iceP_finish = istr.readBool();
        inS.endReadParams();
        obj.addSongData(iceP_song, iceP_data, iceP_finish, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_updateSong(MusicLibrary obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        Song iceP_song;
        boolean iceP_reset;
        iceP_song = Song.ice_read(istr);
        iceP_reset = istr.readBool();
        inS.endReadParams();
        obj.updateSong(iceP_song, iceP_reset, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_removeSong(MusicLibrary obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        Song iceP_song;
        iceP_song = Song.ice_read(istr);
        inS.endReadParams();
        obj.removeSong(iceP_song, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_searchWithText(MusicLibrary obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_text;
        iceP_text = istr.readString();
        inS.endReadParams();
        Song[] ret = obj.searchWithText(iceP_text, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        SongsHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_playSong(MusicLibrary obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        Song iceP_song;
        iceP_song = Song.ice_read(istr);
        inS.endReadParams();
        int ret = obj.playSong(iceP_song, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeInt(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_stopSong(MusicLibrary obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_port;
        iceP_port = istr.readInt();
        inS.endReadParams();
        obj.stopSong(iceP_port, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "addSong",
        "addSongData",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "playSong",
        "removeSong",
        "searchWithText",
        "stopSong",
        "updateSong"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_addSong(this, in, current);
            }
            case 1:
            {
                return _iceD_addSongData(this, in, current);
            }
            case 2:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 5:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 6:
            {
                return _iceD_playSong(this, in, current);
            }
            case 7:
            {
                return _iceD_removeSong(this, in, current);
            }
            case 8:
            {
                return _iceD_searchWithText(this, in, current);
            }
            case 9:
            {
                return _iceD_stopSong(this, in, current);
            }
            case 10:
            {
                return _iceD_updateSong(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
